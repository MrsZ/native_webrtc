/*
 *  Copyright (c) 2012 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree. An additional intellectual property rights grant can be found
 *  in the file PATENTS.  All contributing project authors may
 *  be found in the AUTHORS file in the root of the source tree.
 *
 * WEBRTC H264 wrapper interface
 */

#ifndef WEBRTC_MODULES_VIDEO_CODING_CODECS_H264_IMPL_H_
#define WEBRTC_MODULES_VIDEO_CODING_CODECS_H264_IMPL_H_

#include <stdint.h>
#include "h264.h"

#if USEOPENH264 
// OpenH264 headers
#include "H264/include/codec_api.h"
#include "H264/include/codec_def.h"
#include "H264/include/codec_app_def.h"
#elif USEX264
#define __STDC_CONSTANT_MACROS
//x264 and ffmpeg headers
extern "C"
{
  #include "x264/x264.h"
  #include "ffmpeg/libavcodec/avcodec.h"
  #include "ffmpeg/libavformat/avformat.h"
  #include "ffmpeg/libswscale/swscale.h"
}
#endif

#include "webrtc/modules/video_coding/codecs/interface/video_codec_interface.h"


namespace webrtc {

  class H264EncoderImpl : public H264Encoder{
 public:
  H264EncoderImpl();

  ~H264EncoderImpl();

  // Free encoder memory.
  //
  // Return value                : WEBRTC_VIDEO_CODEC_OK if OK, < 0 otherwise.
  int Release();

  // Initialize the encoder with the information from the codecSettings
  //
  // Input:
  //          - codec_settings    : Codec settings
  //          - number_of_cores   : Number of cores available for the encoder
  //          - max_payload_size  : The maximum size each payload is allowed
  //                                to have. Usually MTU - overhead.
  //
  // Return value                 : Set bit rate if OK
  //                                <0 - Errors:
  //                                  WEBRTC_VIDEO_CODEC_ERR_PARAMETER
  //                                  WEBRTC_VIDEO_CODEC_ERR_SIZE
  //                                  WEBRTC_VIDEO_CODEC_LEVEL_EXCEEDED
  //                                  WEBRTC_VIDEO_CODEC_MEMORY
  //                                  WEBRTC_VIDEO_CODEC_ERROR
  int InitEncode(const VideoCodec* codecSettings, int32_t numberOfCores, uint32_t maxPayloadSize);

  // Encode an I420 image (as a part of a video stream). The encoded image
  // will be returned to the user through the encode complete callback.
  //
  // Input:
  //          - input_image       : Image to be encoded
  //          - frame_types       : Frame type to be generated by the encoder.
  //
  // Return value                 : WEBRTC_VIDEO_CODEC_OK if OK
  //                                <0 - Errors:
  //                                  WEBRTC_VIDEO_CODEC_ERR_PARAMETER
  //                                  WEBRTC_VIDEO_CODEC_MEMORY
  //                                  WEBRTC_VIDEO_CODEC_ERROR
  //                                  WEBRTC_VIDEO_CODEC_TIMEOUT

  int Encode(const I420VideoFrame& input_image,
                     const CodecSpecificInfo* codec_specific_info,
                     const std::vector<VideoFrameType>* frame_types);

  // Register an encode complete callback object.
  //
  // Input:
  //          - callback         : Callback object which handles encoded images.
  //
  // Return value                : WEBRTC_VIDEO_CODEC_OK if OK, < 0 otherwise.
  int RegisterEncodeCompleteCallback(EncodedImageCallback* callback);

  // Inform the encoder of the new packet loss rate and the round-trip time of
  // the network.
  //
  //          - packet_loss : Fraction lost
  //                          (loss rate in percent = 100 * packetLoss / 255)
  //          - rtt         : Round-trip time in milliseconds
  // Return value           : WEBRTC_VIDEO_CODEC_OK if OK
  //                          <0 - Errors: WEBRTC_VIDEO_CODEC_ERROR
  //
  int SetChannelParameters(uint32_t packet_loss, int rtt);

  // Inform the encoder about the new target bit rate.
  //
  //          - new_bitrate_kbit : New target bit rate
  //          - frame_rate       : The target frame rate
  //
  // Return value                : WEBRTC_VIDEO_CODEC_OK if OK, < 0 otherwise.
  int SetRates(uint32_t new_bitrate_kbit, uint32_t frame_rate);

 private:
  // Update frame size for codec.
  int UpdateCodecFrameSize(const I420VideoFrame& input_image);

  //void PopulateCodecSpecific(CodecSpecificInfo* codec_specific,
  //                           const vpx_codec_cx_pkt& pkt,
  //                           uint32_t timestamp);

  EncodedImage encoded_image_;
  EncodedImageCallback* encoded_complete_callback_;
  VideoCodec codec_;
  bool inited_;

#if USEOPENH264
  ISVCEncoder* encoder_;
#elif  USEX264
  //x264
  x264_picture_t pic;
  x264_picture_t pic_out;
  x264_t *encoder_;
  int i_frame = 0;
  x264_nal_t *nal;
#endif
};  // end of H264Encoder class


  class H264DecoderImpl : public H264Decoder {
 public:
  enum {
    MAX_ENCODED_IMAGE_SIZE = 32768
  };

  H264DecoderImpl();

  ~H264DecoderImpl();

  // Initialize the decoder.
  //
  // Return value         :  WEBRTC_VIDEO_CODEC_OK.
  //                        <0 - Errors:
  //                                  WEBRTC_VIDEO_CODEC_ERROR
  int InitDecode(const VideoCodec* inst, int number_of_cores);

  // Decode encoded image (as a part of a video stream). The decoded image
  // will be returned to the user through the decode complete callback.
  //
  // Input:
  //          - input_image         : Encoded image to be decoded
  //          - missing_frames      : True if one or more frames have been lost
  //                                  since the previous decode call.
  //          - fragmentation       : Specifies the start and length of each H264
  //                                  partition.
  //          - codec_specific_info : pointer to specific codec data
  //          - render_time_ms      : Render time in Ms
  //
  // Return value                 : WEBRTC_VIDEO_CODEC_OK if OK
  //                                <0 - Errors:
  //                                      WEBRTC_VIDEO_CODEC_ERROR
  //                                      WEBRTC_VIDEO_CODEC_ERR_PARAMETER
  int Decode(const EncodedImage& input_image,
                     bool missing_frames,
                     const RTPFragmentationHeader* fragmentation,
                     const CodecSpecificInfo* codec_specific_info,
                     int64_t /*render_time_ms*/);

  // Register a decode complete callback object.
  //
  // Input:
  //          - callback         : Callback object which handles decoded images.
  //
  // Return value                : WEBRTC_VIDEO_CODEC_OK if OK, < 0 otherwise.
  int RegisterDecodeCompleteCallback(DecodedImageCallback* callback);

  // Free decoder memory.
  //
  // Return value                : WEBRTC_VIDEO_CODEC_OK if OK
  //                               <0 - Errors:
  //                                      WEBRTC_VIDEO_CODEC_ERROR
  int Release();

  // Reset decoder state and prepare for a new call.
  //
  // Return value         : WEBRTC_VIDEO_CODEC_OK.
  //                        <0 - Errors:
  //                                  WEBRTC_VIDEO_CODEC_UNINITIALIZED
  //                                  WEBRTC_VIDEO_CODEC_ERROR
  int Reset();

  // Create a copy of the codec and its internal state.
  //
  // Return value                : A copy of the instance if OK, NULL otherwise.
  VideoDecoder* Copy();

 private:
  I420VideoFrame decoded_image_;
  DecodedImageCallback* decode_complete_callback_;
  bool inited_;
  VideoCodec codec_;
  bool key_frame_required_;
#if USEOPENH264
  ISVCDecoder* decoder_;
  unsigned char* buffer_with_start_code_;
#elif USEX264
  AVCodecContext  *pCodecCtx;
  AVCodec     *pCodec;
  AVFrame *pFrame, *pFrameYUV;
  AVPacket *packet;
  struct SwsContext *img_convert_ctx;
  uint8_t *decode_buffer;
  uint8_t *out_buffer;
  int framecnt = 0;
  int encoded_length = 0;
  int y_size = 0;
  FILE *fp_yuv;
  FILE *fp_h264;
#endif
};  // end of H264Decoder class

}  // namespace webrtc

#endif  // WEBRTC_MODULES_VIDEO_CODING_CODECS_H264_IMPL_H_
